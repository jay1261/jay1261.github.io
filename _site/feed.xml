

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>jay1261</title>
  <subtitle>개발 일지</subtitle>
  <updated>2024-03-13T16:08:28+09:00</updated>
  <author>
    <name>Dongjae Lee</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Dongjae Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>SQL Grammer (11) - Date</title>
    <link href="http://localhost:4000/posts/SQL-Grammer-(11)-Date/" rel="alternate" type="text/html" title="SQL Grammer (11) - Date" />
    <published>2024-03-13T00:00:00+09:00</published>
  
    <updated>2024-03-13T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/SQL-Grammer-(11)-Date/</id>
    <content src="http://localhost:4000/posts/SQL-Grammer-(11)-Date/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="MySQL" />
    
    <category term="SQL Grammer" />
    
  

  
    <summary>
      





      SQL Grammer (11) - Date


Date

년, 월, 일, 시, 분, 초 등의 값을 모두 갖고 있으며, 목적에 따라 월, 주, 일 등으로 포맷을 변경할 수 있습니다.
데이터에 날짜를 지정하거나, 조건에 날짜를 사용해야할 때 유용합니다.

  date_format
    
      년: Y(4자리) , y(2자리)
      월: M,m
      일: d, e
      요일: w
    
  


select date(date) date_type,  
       date_format(date(date), '%Y') "년",  
       date_format(date(date), '%m') "월",  
       date_format(date(date), '%d') "일",  
...
    </summary>
  

  </entry>

  
  <entry>
    <title>SQL Grammer (10) - Pivot tabel, Window function</title>
    <link href="http://localhost:4000/posts/SQL-Grammer-(10)-Pivot-tabel,-Window-function/" rel="alternate" type="text/html" title="SQL Grammer (10) - Pivot tabel, Window function" />
    <published>2024-03-13T00:00:00+09:00</published>
  
    <updated>2024-03-13T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/SQL-Grammer-(10)-Pivot-tabel,-Window-function/</id>
    <content src="http://localhost:4000/posts/SQL-Grammer-(10)-Pivot-tabel,-Window-function/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="MySQL" />
    
    <category term="SQL Grammer" />
    
  

  
    <summary>
      





      SQL Grammer (10) - Pivot tabel, Window function


Pivot tabel


2개 이상의 기준으로 데이터를 집계할 때, 보기 쉽게 배열하여 보여주는 것을 의미합니다. 집계 기준을 행의 기준으로 잡고, 구분 컬럼으로 데이터를 보여줄 수 있습니다.

select restaurant_name,  
       max(if(hh='15', cnt_order, 0)) "15",  
       max(if(hh='16', cnt_order, 0)) "16",  
       max(if(hh='17', cnt_order, 0)) "17",  
       max(if(hh='18', cnt_order, 0)) "18",  
       max(if(hh='19', cnt_o...
    </summary>
  

  </entry>

  
  <entry>
    <title>SQL Grammer (9) - Null, Coalesce</title>
    <link href="http://localhost:4000/posts/SQL-Grammer-(9)-Null,-Coalesce/" rel="alternate" type="text/html" title="SQL Grammer (9) - Null, Coalesce" />
    <published>2024-03-12T00:00:00+09:00</published>
  
    <updated>2024-03-12T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/SQL-Grammer-(9)-Null,-Coalesce/</id>
    <content src="http://localhost:4000/posts/SQL-Grammer-(9)-Null,-Coalesce/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="MySQL" />
    
    <category term="SQL Grammer" />
    
  

  
    <summary>
      





      SQL Grammer (9) - Null, Coalesce


Null


값이 없을 때 Null 을 이용한다. 숫자 계산같은 함수를 사용할 때 알아두면 좋은 점이 있는데, Null로 처리한 것과 다른 문자로 처리된 경우 계산값이 다르게 나올 수 있다는 것이다.
MySQL에서는 사용할 수 없는 값이 연산으로 들어오면 자동으로 0으로 간주한다. Avg로 평균을 구하는데 하나의 값이 0으로 들어가면서 자릿수는 차지해버려 평균값을 깎아먹는 역할을 하게된다. 하지만 Null로 되어있다면 완전히 제외되어서 계산에 포함되지 않는다.

ex)
select restaurant_name,  
       avg(rating) average_of_rating,  
       avg(if(rating&amp;lt;&amp;gt;'No...
    </summary>
  

  </entry>

  
  <entry>
    <title>SQL Grammer (8) - Join</title>
    <link href="http://localhost:4000/posts/SQL-Grammer-(8)-Join/" rel="alternate" type="text/html" title="SQL Grammer (8) - Join" />
    <published>2024-03-12T00:00:00+09:00</published>
  
    <updated>2024-03-12T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/SQL-Grammer-(8)-Join/</id>
    <content src="http://localhost:4000/posts/SQL-Grammer-(8)-Join/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="MySQL" />
    
    <category term="SQL Grammer" />
    
  

  
    <summary>
      





      SQL Grammer (8) - Join


Join


필요한 데이터가 서로 다른 테이블에 있을 때 사용할 수 있는 문법입니다. 공통 컬럼을 기준으로 두 테이블을 합쳐서 각각 테이블에서 필요한 데이터를 조회할 수 있습니다.

Join의 종류

  Inner Join
    
      가장 많이 사용하는 조인으로, 두 테이블 모두에 있는 값만 조회하는 것을 말합니다.
    
  
  OuterJoin
    
      left, right, full 이 있으며 각각 왼쪽 테이블의 모든 값 조회, 오른쪽 테이블의 모든 값 조회, 모든 테이블의 모든 값 조회를 할 수 있습니다.
    
  
  Cross Join
    
      한쪽 테이블의 모든 행과 다른쪽 테이블의 모든 행을 조인시키는 기능...
    </summary>
  

  </entry>

  
  <entry>
    <title>SQL Grammer (7) - Subquery</title>
    <link href="http://localhost:4000/posts/SQL-Grammer-(7)-Subquery/" rel="alternate" type="text/html" title="SQL Grammer (7) - Subquery" />
    <published>2024-03-12T00:00:00+09:00</published>
  
    <updated>2024-03-12T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/SQL-Grammer-(7)-Subquery/</id>
    <content src="http://localhost:4000/posts/SQL-Grammer-(7)-Subquery/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="MySQL" />
    
    <category term="SQL Grammer" />
    
  

  
    <summary>
      





      SQL Grammer (7) - Subquery


Subquery


여러번의 연산을 수행해야할 때, 조건문에 연산 결과를 사용하거나 조건에 Query결과를 사용하고 싶을 때 쓸 수 있는 문법입니다. 복잡한 쿼리문을 효율적으로 작성할 수 있습니다. 기본 구조는 아래와 같습니다.

select column1, test
from (
	#subquery
	select column1, column2 as test
	from table1
) subq



예시


ex 1) 음식점의 총 주문수량과 주문금액을 연산하고, 주문수량을 기반으로 수수료 할인율 구하기

  할인조건: 수량 5개 이하-&amp;gt; 10%, 수량 15개 초과 &amp;amp; 총 주문금액 300000이상 - 0.5%, 이외 1%


select re...
    </summary>
  

  </entry>

</feed>


