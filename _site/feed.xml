

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>jay1261</title>
  <subtitle>개발 일지</subtitle>
  <updated>2024-03-26T14:18:47+09:00</updated>
  <author>
    <name>Dongjae Lee</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Dongjae Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Java 문법 (4) - 기본형과 참조형</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(4)-%EA%B8%B0%EB%B3%B8%ED%98%95%EA%B3%BC-%EC%B0%B8%EC%A1%B0%ED%98%95/" rel="alternate" type="text/html" title="Java 문법 (4) - 기본형과 참조형" />
    <published>2024-03-26T00:00:00+09:00</published>
  
    <updated>2024-03-26T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(4)-%EA%B8%B0%EB%B3%B8%ED%98%95%EA%B3%BC-%EC%B0%B8%EC%A1%B0%ED%98%95/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(4)-%EA%B8%B0%EB%B3%B8%ED%98%95%EA%B3%BC-%EC%B0%B8%EC%A1%B0%ED%98%95/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java 문법" />
    
  

  
    <summary>
      





      Java 문법 (4) - 기본형과 참조형







기본형 vs 참조형


대원칙: 자바는 항상 변수의 값을 복사해서 대입한다.

기본형


  int, long, double, boolean 처럼 변수에 사용할 값을 직접 넣을 수 있는 데이터 타입
  10, 20과 같이 실제 사용하는 값을 변수에 담을 수 있다
  들어 있는 값을 그대로 계산에 사용할 수 있다


참조형


  Student student1, int[] students 처럼 데이터에 접근하기 위한 참조(메모리 주소)값을 저장하는 데이터 타입
  실제 사용하는 값을 담는게 아닌, 실제 객체의 참조(주소)를 저장한다.
  참조값을 그대로 사용할 수 없다








기본형의 변수 대입


자바에서 변수에 값을 대입하는 것은 변수에 들...
    </summary>
  

  </entry>

  
  <entry>
    <title>Programmers Java Lv.0 (1) - 중앙값 구하기</title>
    <link href="http://localhost:4000/posts/Programmers-Java-Lv.0-(1)-%EC%A4%91%EC%95%99%EA%B0%92-%EA%B5%AC%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="Programmers Java Lv.0 (1) - 중앙값 구하기" />
    <published>2024-03-25T00:00:00+09:00</published>
  
    <updated>2024-03-25T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Programmers-Java-Lv.0-(1)-%EC%A4%91%EC%95%99%EA%B0%92-%EA%B5%AC%ED%95%98%EA%B8%B0/</id>
    <content src="http://localhost:4000/posts/Programmers-Java-Lv.0-(1)-%EC%A4%91%EC%95%99%EA%B0%92-%EA%B5%AC%ED%95%98%EA%B8%B0/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Programmers" />
    
    <category term="Lv.0_Java" />
    
  

  
    <summary>
      





      중앙값 구하기







문제 설명

중앙값은 어떤 주어진 값들을 크기의 순서대로 정렬했을 때 가장 중앙에 위치하는 값을 의미합니다. 예를 들어 1, 2, 7, 10, 11의 중앙값은 7입니다. 정수 배열 array가 매개변수로 주어질 때, 중앙값을 return 하도록 solution 함수를 완성해보세요.



제한사항


  array의 길이는 홀수입니다.
  0 &amp;lt; array의 길이 &amp;lt; 100
  -1,000 &amp;lt; array의 원소 &amp;lt; 1,000




입출력 예


  
    
      array
      result
    
  
  
    
      [1, 2, 7, 10, 11]
      7
    
    
      [9, -1, 0]
      0
   ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (3) - 새로운 Switch문</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(3)-%EC%83%88%EB%A1%9C%EC%9A%B4-Switch%EB%AC%B8/" rel="alternate" type="text/html" title="Java 문법 (3) - 새로운 Switch문" />
    <published>2024-03-15T00:00:00+09:00</published>
  
    <updated>2024-03-15T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(3)-%EC%83%88%EB%A1%9C%EC%9A%B4-Switch%EB%AC%B8/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(3)-%EC%83%88%EB%A1%9C%EC%9A%B4-Switch%EB%AC%B8/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java 문법" />
    
  

  
    <summary>
      





      Java 문법 (2) - 새로운 Switch문







기존 Switch


자바의 switch 문은 아래와 같이 작성할 수 있습니다. 하지만 break도 꼭 써줘야하고, if 문보다 조금은 더 보기 편하지만 많이 차이나지는 않습니다. 따라서 Java14부터는 새로운 switch문을 사용할 수 있습니다.

switch (조건){  
	case 1 :  
		// 조건의 결과값이 1일 때 실행할 코드  
		break;  
	case 2:  
		// 조건의 결과값이 2일 때 실행할 코드
		break;  
	case 3:  
		// 조건의 결과값이 3일 때 실행할 코드
		break;  
	default:  
		// 조건이 위의 어떤 값에도 해당하지 않을 때 실행할 코드
}








새로운...
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (2) - 변수</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(2)-%EB%B3%80%EC%88%98/" rel="alternate" type="text/html" title="Java 문법 (2) - 변수" />
    <published>2024-03-14T00:00:00+09:00</published>
  
    <updated>2024-03-14T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(2)-%EB%B3%80%EC%88%98/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(2)-%EB%B3%80%EC%88%98/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java 문법" />
    
  

  
    <summary>
      





      Java 문법 (2) - 변수







자바의 변수 초기화


자바에서 변수를 선언하고 초기화하지 않고 출력하려고 하면 "java: variable a might not have been initialized" 라는 오류메시지가 나타납니다. 이 오류메시지는 변수를 초기화하지 않았다는 것을 알려주는데요. 컴퓨터의 메모리는 여러 시스템이 공유하는 자원으로, 다양한 값들이 저장됩니다. 변수를 선언하면 메모리 상에 일정 공간을 차지하게 되는데, 이 공간은 이전에 다른 값이 저장되었던 곳일 수 있습니다. 그 공간에 어떤 값이 있었는지 알 수 없기 때문에 초기화하지 않은 변수의 공간에는 쓰레기값이 남아있습니다. 이러한 쓰레기값으로 인해 예상치 못한 결과가 출력될 수 있으므로, 이를 방지하기 위해 자바는 변수의...
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (1) - Java</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(1)-Java/" rel="alternate" type="text/html" title="Java 문법 (1) - Java" />
    <published>2024-03-14T00:00:00+09:00</published>
  
    <updated>2024-03-14T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(1)-Java/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(1)-Java/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java 문법" />
    
  

  
    <summary>
      





      Java 문법 (1) - Java







Java 표준 스펙과 구현


자바는 표준 스펙(설계도와 문서)과 여러 회사에서 실제로 구현한 다양한 자바 버전으로 나눌 수 있습니다. 이러한 표준 스펙은 자바 커뮤니티 프로세스(JCP)를 통해 관리되며, 다양한 구현은 각각의 OS에서 작동하도록 설계되어 있습니다. 예를 들어, Amazon Corretto는 AWS에 최적화되어 있습니다. 자바 구현들은 대부분 호환성이 높아, 한 구현에서 다른 구현으로 변경하는 것이 비교적 용이합니다.







자바의 특징


자바는 Write once, run everywhere라는 모토를 가지고 있습니다. 그래서 나타난 중요한 특징 중 하나가 바로 운영체제 독립성입니다. 자바 프로그램은 다양한 운영체제에서 실행될 수 ...
    </summary>
  

  </entry>

</feed>


