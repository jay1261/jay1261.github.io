

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>jay1261</title>
  <subtitle>개발 일지</subtitle>
  <updated>2024-04-10T18:15:27+09:00</updated>
  <author>
    <name>Dongjae Lee</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Dongjae Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Java 문법 (12) - 다형성2</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(12)-%EB%8B%A4%ED%98%95%EC%84%B12/" rel="alternate" type="text/html" title="Java 문법 (12) - 다형성2" />
    <published>2024-04-08T00:00:00+09:00</published>
  
    <updated>2024-04-08T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(12)-%EB%8B%A4%ED%98%95%EC%84%B12/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(12)-%EB%8B%A4%ED%98%95%EC%84%B12/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Basic" />
    
  

  
    <summary>
      





      Java 문법 (12) - 다형성2







다형성 활용


다형성을 사용하지 않은 코드

다형성을 사용하지 않은 코드를 변경해서 다형성을 적용시켜보겠습니다. 단순한 동물 소리를 테스트하는 코드입니다.

// Dog.java
package poly.ex1;  
  
public class Dog {  
    public void sound(){  
        System.out.println("멍멍");  
    }  
}


// Cat.java
package poly.ex1;  
  
public class Cat {  
    public void sound(){  
        System.out.println("야옹");  
    }  
}


// AnimalSountMain....
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (11) - 다형성1</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(11)-%EB%8B%A4%ED%98%95%EC%84%B11/" rel="alternate" type="text/html" title="Java 문법 (11) - 다형성1" />
    <published>2024-04-08T00:00:00+09:00</published>
  
    <updated>2024-04-08T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(11)-%EB%8B%A4%ED%98%95%EC%84%B11/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(11)-%EB%8B%A4%ED%98%95%EC%84%B11/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Basic" />
    
  

  
    <summary>
      





      Java 문법 (11) - 다형성1







다형성


다형성은 이름 그대로 “다양한 형태”, “여러 형태”를 뜻합니다.
프로그래밍에서 다형성은 한 객체가 여러 타입의 객체로 취급될 수 있는 능력을 말합니다. 보통 하나의 객체는 하나의 타입으로 고정되어 있습니다. 그런데 다형성을 사용하면 하나의 객체가 다른 타입으로 사용될 수 있습니다.

다형성을 이해하기 위해서는 다형적 참조, 메서드 오버라이딩 2가지 핵심 이론을 알아야합니다.







다형적 참조


// Parent.java
package poly.Basic;  
  
public class Parent {  
    public void parentMethod(){  
        System.out.println("parent.pa...
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (10) - 상속</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(10)-%EC%83%81%EC%86%8D/" rel="alternate" type="text/html" title="Java 문법 (10) - 상속" />
    <published>2024-04-05T00:00:00+09:00</published>
  
    <updated>2024-04-09T18:53:54+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(10)-%EC%83%81%EC%86%8D/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(10)-%EC%83%81%EC%86%8D/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Basic" />
    
  

  
    <summary>
      





      Java 문법 (10) - 상속







상속 관계


상속은 객체 지향 프로그래밍의 핵심 요소 중 하나로, 기존 클래스의 필드와 메서드를 새로운 클래스에서 재사용하게 해줍니다. 이름 그대로 기존 클래스의 속성과 기능을 그대로 물려받는 것이고, exdends 키워드를 사용하며 대상은 하나만 선택 가능합니다.

전기차와 가솔린차는 자동차의 더 구체적인 개념이고, 반대로 자동차는 둘을 포함하는 추상적인 개념입니다. 또한, 자동차의 이동, 문을 열기, 시동걸기 등 공통 기능이 있기 때문에 이런 경우 상속관계를 사용하는 것이 효과적입니다.

// Car.java
package extends1.ex2;  
  
public class Car {  
    public void move(){  
       ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (9) - Final</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(9)-Final/" rel="alternate" type="text/html" title="Java 문법 (9) - Final" />
    <published>2024-04-04T00:00:00+09:00</published>
  
    <updated>2024-04-08T14:19:08+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(9)-Final/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(9)-Final/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Basic" />
    
  

  
    <summary>
      





      Java 문법 (9) - Final







Final 변수


final이 붙은 변수는 최초에 값을 할당할 때를 제외하고 값을 변경할 수 없습니다. 매개변수에 final이 붙으면 메서드 내부에서 매개변수의 값을 변경할 수 없습니다.

package final1;
public class FinalLocalMain {
	public static void main(String[] args) { //final 지역 변수1
		final int data1;  
		data1 = 10; //최초 한번만 할당 가능 
		//data1 = 20; // 컴파일 오류 변경 불가능	
		//final 지역 변수2  
		final int data2 = 10; //data2 = 20; //컴파일 오류
         ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (8) - 자바 메모리 구조와 static</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(8)-%EC%9E%90%EB%B0%94-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0%EC%99%80-static/" rel="alternate" type="text/html" title="Java 문법 (8) - 자바 메모리 구조와 static" />
    <published>2024-04-03T00:00:00+09:00</published>
  
    <updated>2024-04-03T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(8)-%EC%9E%90%EB%B0%94-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0%EC%99%80-static/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(8)-%EC%9E%90%EB%B0%94-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0%EC%99%80-static/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Basic" />
    
  

  
    <summary>
      





      Java 문법 (8) - 자바 메모리 구조와 static







자바 메모리 구조


자바의 메모리 구조는 크게 메서드 영역, 스택 영역, 힙 영역 3개로 나눌 수 있습니다.

메서드 영역

메서드 영역은 프로그램을 실행하는데 필요한 공통 데이터를 관리하는 영역입니다. 프로그램의 모든 영역에서 공유합니다.


  클래스 정보(클래스의 실행코드, 필드, 매서드, 생성자 등)를 보관
  static 변수들을 보관
  런타임 상수 풀: 공통 리터럴 상수들을 보관 (ex “hello”)


스택 영역

스택 영역은 자바 실행시 쓰레드 별로 하나씩 스택이 생성됩니다. 각 스택 프레임은 지역변수, 중간 연산 결과, 메서드 호출 정보 등을 포함합니다.


  매서드를 호출할 때마다 하나의 스택 프레임이 쌓이고...
    </summary>
  

  </entry>

</feed>


