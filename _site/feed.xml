

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>jay1261</title>
  <subtitle>개발 일지</subtitle>
  <updated>2024-04-12T11:19:27+09:00</updated>
  <author>
    <name>Dongjae Lee</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Dongjae Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Java 문법 (14) - Object 클래스</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(14)-Object-%ED%81%B4%EB%9E%98%EC%8A%A4/" rel="alternate" type="text/html" title="Java 문법 (14) - Object 클래스" />
    <published>2024-04-11T00:00:00+09:00</published>
  
    <updated>2024-04-11T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(14)-Object-%ED%81%B4%EB%9E%98%EC%8A%A4/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(14)-Object-%ED%81%B4%EB%9E%98%EC%8A%A4/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Mid1" />
    
  

  
    <summary>
      





      Java 문법 (14) - Object 클래스







java.lang 패키지


자바가 기본으로 제공하는 라이브러리 중에 가장 기본이 되는 것이 java.lang 패키지 입니다. 자바 언어를 이루는 가장 기본이 되는 클래스들을 보관하는 패키지입니다. java.lang 패키지는 모든 자바 애플리케이션에 자동으로 임포트 되기 때문에 생략해도 됩니다.

java.lang 패캐지의 대표적인 클래스들

  Object: 모든 자바 객체의 부모 클래스
  String: 문자열
  Integer, Long, Double: 래퍼 타입, 기본형 데이터 타입을 객체로 만든 것
  Class: 클래스 메타 정보
  System: 시스템과 관련된 기본 기능들을 제공








Object 클래스

Object 예...
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (13) - 다형성과 설계</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(13)-%EB%8B%A4%ED%98%95%EC%84%B1%EA%B3%BC-%EC%84%A4%EA%B3%84/" rel="alternate" type="text/html" title="Java 문법 (13) - 다형성과 설계" />
    <published>2024-04-10T00:00:00+09:00</published>
  
    <updated>2024-04-10T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(13)-%EB%8B%A4%ED%98%95%EC%84%B1%EA%B3%BC-%EC%84%A4%EA%B3%84/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(13)-%EB%8B%A4%ED%98%95%EC%84%B1%EA%B3%BC-%EC%84%A4%EA%B3%84/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Basic" />
    
  

  
    <summary>
      





      Java 문법 (13) - 다형성과 설계







좋은 객체지향 프로그래밍


객체지향에는 추상화, 캡슐화, 상속, 다형성의 특징이 있는데 이 중 다형성이 가장 중요하다고 볼 수 있습니다. 객체지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러개의 독립된 단위, 객체들의 모임으로 파악하고자 하는 것입니다. 각각의 객체들은 메시지를 주고받고 데이터를 처리할 수 있습니다.

객체 지향 프로그래밍은 프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용됩니다. 마치 레고 블럭을 조립하듯이, 컴퓨터 부품을 갈아 끼우듯이 컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법입니다.







다형성

역할과 구현으로 구분하면 세상이 단순해지고,...
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (12) - 다형성2</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(12)-%EB%8B%A4%ED%98%95%EC%84%B12/" rel="alternate" type="text/html" title="Java 문법 (12) - 다형성2" />
    <published>2024-04-09T00:00:00+09:00</published>
  
    <updated>2024-04-10T19:48:52+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(12)-%EB%8B%A4%ED%98%95%EC%84%B12/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(12)-%EB%8B%A4%ED%98%95%EC%84%B12/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Basic" />
    
  

  
    <summary>
      





      Java 문법 (12) - 다형성2







다형성 활용


다형성을 사용하지 않은 코드

다형성을 사용하지 않은 코드를 변경해서 다형성을 적용시켜보겠습니다. 단순한 동물 소리를 테스트하는 코드입니다.

// Dog.java
package poly.ex1;  
  
public class Dog {  
    public void sound(){  
        System.out.println("멍멍");  
    }  
}


// Cat.java
package poly.ex1;  
  
public class Cat {  
    public void sound(){  
        System.out.println("야옹");  
    }  
}


// AnimalSountMain....
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (11) - 다형성1</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(11)-%EB%8B%A4%ED%98%95%EC%84%B11/" rel="alternate" type="text/html" title="Java 문법 (11) - 다형성1" />
    <published>2024-04-08T00:00:00+09:00</published>
  
    <updated>2024-04-08T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(11)-%EB%8B%A4%ED%98%95%EC%84%B11/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(11)-%EB%8B%A4%ED%98%95%EC%84%B11/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Basic" />
    
  

  
    <summary>
      





      Java 문법 (11) - 다형성1







다형성


다형성은 이름 그대로 “다양한 형태”, “여러 형태”를 뜻합니다.
프로그래밍에서 다형성은 한 객체가 여러 타입의 객체로 취급될 수 있는 능력을 말합니다. 보통 하나의 객체는 하나의 타입으로 고정되어 있습니다. 그런데 다형성을 사용하면 하나의 객체가 다른 타입으로 사용될 수 있습니다.

다형성을 이해하기 위해서는 다형적 참조, 메서드 오버라이딩 2가지 핵심 이론을 알아야합니다.







다형적 참조


// Parent.java
package poly.Basic;  
  
public class Parent {  
    public void parentMethod(){  
        System.out.println("parent.pa...
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (10) - 상속</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(10)-%EC%83%81%EC%86%8D/" rel="alternate" type="text/html" title="Java 문법 (10) - 상속" />
    <published>2024-04-05T00:00:00+09:00</published>
  
    <updated>2024-04-09T18:53:54+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(10)-%EC%83%81%EC%86%8D/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(10)-%EC%83%81%EC%86%8D/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Basic" />
    
  

  
    <summary>
      





      Java 문법 (10) - 상속







상속 관계


상속은 객체 지향 프로그래밍의 핵심 요소 중 하나로, 기존 클래스의 필드와 메서드를 새로운 클래스에서 재사용하게 해줍니다. 이름 그대로 기존 클래스의 속성과 기능을 그대로 물려받는 것이고, exdends 키워드를 사용하며 대상은 하나만 선택 가능합니다.

전기차와 가솔린차는 자동차의 더 구체적인 개념이고, 반대로 자동차는 둘을 포함하는 추상적인 개념입니다. 또한, 자동차의 이동, 문을 열기, 시동걸기 등 공통 기능이 있기 때문에 이런 경우 상속관계를 사용하는 것이 효과적입니다.

// Car.java
package extends1.ex2;  
  
public class Car {  
    public void move(){  
       ...
    </summary>
  

  </entry>

</feed>


