

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>jay1261</title>
  <subtitle>개발 일지</subtitle>
  <updated>2024-04-30T12:47:58+09:00</updated>
  <author>
    <name>Dongjae Lee</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Dongjae Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Java 문법 (18) - Wrapper Class</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(18)-Wrapper-Class/" rel="alternate" type="text/html" title="Java 문법 (18) - Wrapper Class" />
    <published>2024-04-29T00:00:00+09:00</published>
  
    <updated>2024-04-29T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(18)-Wrapper-Class/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(18)-Wrapper-Class/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Mid1" />
    
  

  
    <summary>
      





      객체가 아닌 기본형

int, char, double 등의 기본형 타입은 객체가 아니다. 따라서 다음과 같은 객체지향의 장점을 적용시킬 수 없다.

객체 메서드 사용 불가능
객체는 유용한 메서드를 제공할 수 있는데, 기본형은 객체가 아니라서 메서드를 제공할 수 없다.
String str = "hello java";
str.split(" "); // 공백을 기준으로 나눠주는 메서드

int num = 0;
num.~~ // 기본형은 메서드 사용 불가능


null 값을 담을 수 없음

값이 없음을 나타내는 null을 사용해야할 때가 있는데, 기본형은 불가능하다.

String str = null; // 객체는 가능
int num = null; // 기본형은 컴파일 오류 발생


컬렉션 사용 불가능

메서...
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (17) - StringBuilder</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(17)-StringBuilder/" rel="alternate" type="text/html" title="Java 문법 (17) - StringBuilder" />
    <published>2024-04-26T00:00:00+09:00</published>
  
    <updated>2024-04-26T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(17)-StringBuilder/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(17)-StringBuilder/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Mid1" />
    
  

  
    <summary>
      





      String의 단점

지난 포스트 String에서 String은 불변이라고 배웠다. 불변인 String의 단점은 문자를 더하거나 변경할 때 마다 계속해서 새로운 객체를 생성해야한다는 점이다. 반복문 안에서 문자를 계속해서 더하거나 변경하는 상황이라면, 많은 String 객체가 생겼다가 GC에 의해 사라짐을 반복하게되고, 이는 cpu, 메모리 낭비로 직결된다.

아래 예제코드와 그림은 String 문자열을 서로 더할 때 일어나는 과정이다. “Hello Java World”를 만드는 과정에 객체가 계속 만들어지고, 쓰임도 없이 버려진다.

String str = "Hello";
str = str + " Java";
str = str + " World";







StringBuilder

이 문제는 S...
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (16) - String</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(16)-String/" rel="alternate" type="text/html" title="Java 문법 (16) - String" />
    <published>2024-04-25T00:00:00+09:00</published>
  
    <updated>2024-04-26T16:51:27+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(16)-String/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(16)-String/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Mid1" />
    
  

  
    <summary>
      





      String 클래스

자바의 기본형 중에 문자를 다루는 타입은 char이다. char를 사용해서 문자를 여러개 나열하려면 char[]를 사용해야하는데, 이는 매우 불편하므로 자바는 문자열을 편하게 다룰 수 있는 String 클래스를 제공한다.

String은 int, char와 다르게 대문자로 시작하는 것을 보아, 기본형이 아니라 참조형인 것을 알 수 있다. 즉, 스택 영역이 아닌 힙 영역에서 문자열 데이터가 관리된다는 것이다.






String은 불변 객체

자바에서 String은 불변객체이다. 즉, 생성 이후 객체의 값을 변경할 수 없다는 의미이다. 아래 예제코드를 보면, 변수 str이 참조하는 객체를 “Hello”라고 생성하고, 이후에 “ Java”라는 문자열을 더해서 객체 값을 변경시킨 것...
    </summary>
  

  </entry>

  
  <entry>
    <title>Java 문법 (15) - 불변 객체</title>
    <link href="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(15)-%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4/" rel="alternate" type="text/html" title="Java 문법 (15) - 불변 객체" />
    <published>2024-04-24T00:00:00+09:00</published>
  
    <updated>2024-04-24T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(15)-%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4/</id>
    <content src="http://localhost:4000/posts/Java-%EB%AC%B8%EB%B2%95-(15)-%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Java_Mid1" />
    
  

  
    <summary>
      





      불변 객체







불변 객체란?

불변 객체는 객체의 상태(내부 멤버변수)가 변하지 않는 객체를 말한다. 코드적으로 쉽게 생각하면 모든 멤버변수가 final로 선언되어 있는 객체이다. 따라서 읽기전용 getter 메서드를 제공하고, 내부 상태를 변경할 수 있는 setter는 제공하지 않는다.







불변 객체를 사용하는 이유

자바에서 객체는 참조를 통해 접근한다. 하나의 객체를 여러 변수가 공유해서 참조할 때, 변수 하나의 값만 변경하고 싶은데 모두 다 변경되어 버리는 일이 발생한다. 이를 원치 않을 때에는 불변 객체를 사용해서 실수를 막아야 한다. 


예를들어 A와 B가 같이 서울에 살고, Address 객체를 공유 참조한다. 이때 B가 포항으로 이사를 가야한다면, B의 주소만 바꿔줘야...
    </summary>
  

  </entry>

  
  <entry>
    <title>Spring (3) - 테스트</title>
    <link href="http://localhost:4000/posts/Spring-(3)-%ED%85%8C%EC%8A%A4%ED%8A%B8/" rel="alternate" type="text/html" title="Spring (3) - 테스트" />
    <published>2024-04-19T00:00:00+09:00</published>
  
    <updated>2024-04-19T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Spring-(3)-%ED%85%8C%EC%8A%A4%ED%8A%B8/</id>
    <content src="http://localhost:4000/posts/Spring-(3)-%ED%85%8C%EC%8A%A4%ED%8A%B8/" />
    <author>
      <name>jay</name>
    </author>

  
    
    <category term="Spring" />
    
    <category term="Spring_Start" />
    
  

  
    <summary>
      





      테스트







JUnit

회원가입 예제코드를 작성하고, 코드를 테스트하기 위해서 main 메서드를 만들어서 실행하거나, 컨트롤러를 통해서 실행할 수 있습니다. 하지만 이 방법들은 준비 시간이 오래걸리고, 반복 테스트, 여러 테스트를 한번에 실행하기 어렵습니다. 따라서 자바의 JUnit이라는 프레임워크로 테스트를 진행하면 이런 문제들을 해결할 수 있습니다.


테스트 파일 만들기

스프링 부트로 만든 프로젝트를 보면 src아래, main과 test로 디렉토리가 나뉘어져 있습니다. 여기서 test/java 아래에 프로젝트명으로 패키지가 만들어져 있으며, 이제 이곳에 테스트할 패키지 및 자바 파일을 만들어서 테스트를 진행하면 됩니다.

테스트할 파일의 이름은 관례적으로 테스트할 클래스의 이름뒤에 Te...
    </summary>
  

  </entry>

</feed>


